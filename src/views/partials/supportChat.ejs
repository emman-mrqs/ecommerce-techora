  <%
    const meSafe        = (typeof locals !== 'undefined' && locals.me) ? locals.me : null;
    const adminSafe     = (typeof locals !== 'undefined' && locals.admin) ? locals.admin : null;
    const threadsSafe   = (typeof locals !== 'undefined' && locals.threads) ? locals.threads : [];
    const imgMaxMb      = (typeof locals !== 'undefined' && typeof locals.CHAT_IMG_MAX_MB !== 'undefined')
                            ? locals.CHAT_IMG_MAX_MB : 4;

    const isAdminView = !!(adminSafe && adminSafe.role === 'admin');
    const isLoggedIn = !!(meSafe || adminSafe); // <-- Check if anyone is logged in
  %>

  <% if (isLoggedIn) { %> <!-- Conditionally render chat if a user/seller/admin is logged in -->
    <!-- Socket.IO client (same origin) -->
    <script src="/socket.io/socket.io.js"></script>
    <link rel="stylesheet" href="/css/supportChat.css">

    <script id="support-bootstrap" type="application/json">
      <%- JSON.stringify({
            me: isAdminView
              ? { role: 'admin', id: 'admin', displayName: 'Admin Support' }
              : (meSafe || { role: 'user', id: null, displayName: 'User' }),
            defaultThread: isAdminView
              ? null
              : (meSafe && meSafe.role !== 'admin'
                  ? { kind: (meSafe.role === 'seller' ? 'seller' : 'user'), partyId: meSafe.id }
                  : null),
            config: { imgMaxMb: imgMaxMb }
          }) %>
    </script>

    <!-- The "defer" attribute ensures this script runs after the HTML is parsed -->
    <script src="/js/supportChat.js" defer></script>

    <!-- Floating Action Button to toggle chat window -->
    <button type="button" class="btn btn-dark rounded-circle shadow chat-fab" id="chatFabBtn" title="Chat">
      <i class="bi bi-chat-dots"></i>
    </button>

    <!-- Main Chat Window Container -->
    <div class="techora-chat-window" id="chatWindow">
        <div id="chatLayout" class="techora-chat-layout d-flex"
            data-role="<%= isAdminView ? 'admin' : ((meSafe && meSafe.role) || 'user') %>">

          <!-- LEFT (Threads List) -->
          <aside class="chat-threads">
            <div class="threads-head d-flex align-items-start gap-2">
              <div class="flex-grow-1">
                <div class="title">Messages</div>
                <div class="subtitle">Support &amp; Customer Chat</div>

                <!-- Search input -->
                <div class="mt-2 position-relative">
                  <input id="chatSearchInput"
                        class="form-control form-control-sm"
                        type="search"
                        placeholder="<%= isAdminView
                                        ? 'Search users or sellers…'
                                        : (meSafe?.role==='seller' ? 'Search users…' : 'Search sellers or users…') %>">
                  <div id="chatSearchResults"
                      class="list-group position-absolute mt-1 w-100"
                      style="z-index:1056; display:none; max-height:260px; overflow:auto;"></div>
                </div>
              </div>
              <button type="button" class="btn btn-link p-0 ms-auto" id="closeChatBtn" title="Close">
                <i class="bi bi-x-lg" style="font-size:1rem"></i>
              </button>
            </div>

            <div class="threads-scroll" id="threadsList">
              <% if (!isAdminView) { %>
                <!-- Default Admin Support thread for user/seller -->
                <div class="thread active" id="default-support-tile"
                    data-kind="<%= (meSafe && meSafe.role) === 'seller' ? 'support_seller' : 'support_user' %>"
                    data-party-id="<%= meSafe ? meSafe.id : '' %>">
                  <div class="thread-avatar">AS</div>
                  <div class="thread-body">
                    <div class="top">
                      <span class="name">Admin Support</span>
                      <span class="badge admin-badge ms-1">ADMIN</span>
                      <span class="ago">now</span>
                    </div>
                    <div class="preview">Welcome to Techora support!</div>
                    <span class="dot online"></span>
                  </div>
                </div>
              <% } else { %>
                <% (threadsSafe || []).forEach(t => { %>
                  <div class="thread"
                      data-kind="<%= t.kind %>"
                      data-party-id="<%= t.party_id %>"
                      <% if (t.thread_id) { %> data-thread-id="<%= t.thread_id %>" <% } %>>
                    <div class="thread-avatar soft">
                      <%= (t.name || (t.kind==='seller'?'Seller':'User'))
                              .split(' ').map(s=>s[0]).join('').slice(0,2).toUpperCase() %>
                    </div>
                    <div class="thread-body">
                      <div class="top">
                        <span class="name"><%= t.name || (t.kind==='seller'?'Seller':'User') %></span>
                        <% if (t.unread && t.unread>0) { %>
                          <span class="unread"><%= t.unread %></span>
                        <% } %>
                        <span class="ago"><%= t.last_at || '' %></span>
                      </div>
                      <div class="preview"><%= t.last_text || 'Tap to open thread' %></div>
                      <span class="dot <%= t.online ? 'online' : '' %>"></span>
                    </div>
                  </div>
                <% }) %>
                <% if (!threadsSafe || threadsSafe.length===0) { %>
                  <div class="p-3 text-muted">No conversations yet.</div>
                <% } %>
              <% } %>
            </div>
          </aside>

          <!-- RIGHT (Chat Pane) -->
          <section class="chat-pane">
            <div class="chat-head border-bottom">
              <button type="button" class="btn btn-link px-2 d-lg-none" id="chatBackBtn" title="Back to Messages">
                <i class="bi bi-chevron-left" style="font-size:1.15rem"></i>
              </button>

              <div class="d-flex align-items-center gap-2" id="chatTitle">
                <div class="chat-avatar">AS</div>
                <div class="d-flex flex-column">
                  <div class="d-flex align-items-center gap-2">
                    <strong class="peer-name">
                      <%= isAdminView ? 'Select a conversation' : 'Admin Support' %>
                    </strong>
                    <span class="badge admin-badge peer-role">
                      <% if (!isAdminView) { %>ADMIN<% } %>
                    </span>
                  </div>
                  <div class="small text-success"><span class="dot online me-1"></span><span class="presence-text">Online</span></div>
                </div>
              </div>
            </div>

            <div class="chat-scroll" id="chatScroll">
              <div class="text-muted small px-2 pt-2" id="emptyHint">
                <%= isAdminView ? 'Pick a thread on the left to start chatting.' : 'Say hi! An agent will join shortly.' %>
              </div>
            </div>

            <div class="composer">
              <button type="button" class="btn-attach" title="Attach" id="btnAttach"><i class="bi bi-paperclip"></i></button>
              <div class="compose-wrap">
                <input class="compose-input" type="text" placeholder="Write a message…" id="composeInput" />
                <button type="button" class="btn-send" title="Send" id="btnSend"><i class="bi bi-send"></i></button>
              </div>
            </div>
          </section>

        </div>
    </div>

    <!-- Message templates -->
    <template id="tpl-bubble-me"><div class="bubble me"><span class="msg"></span><div class="time"></div></div></template>
    <template id="tpl-bubble-them"><div class="bubble them"><span class="msg"></span><div class="time"></div></div></template>
    <template id="tpl-image-me"><div class="bubble me"><img class="msg-img img-fluid rounded" alt="image"><div class="time"></div></div></template>
    <template id="tpl-image-them"><div class="bubble them"><img class="msg-img img-fluid rounded" alt="image"><div class="time"></div></div></template>


    <!-- Logic to control the new floating chat window -->
    <script>
    (function(){
      const fabBtn = document.getElementById('chatFabBtn');
      const chatWindow = document.getElementById('chatWindow');
      const closeBtn = document.getElementById('closeChatBtn');
      const layout = document.getElementById('chatLayout');
      const backBtn = document.getElementById('chatBackBtn');

      function isDesktopView() {
        const cs = getComputedStyle(document.documentElement);
        const threadsW = parseInt(cs.getPropertyValue('--threads-w')) || 300;
        const minChatW = parseInt(cs.getPropertyValue('--min-chat-w')) || 560;
        const windowW = chatWindow.getBoundingClientRect().width;
        return windowW >= (threadsW + minChatW);
      }

      function applyInitialMobileView() {
        const isLarge = window.matchMedia('(min-width: 992px)').matches;
        layout.classList.remove('show-chat', 'show-threads');
        if (isLarge && isDesktopView()) {
          return;
        }
        layout.classList.add('show-threads');
      }

      function openChat() {
        chatWindow.classList.add('open');
        fabBtn.querySelector('i').classList.remove('bi-chat-dots');
        fabBtn.querySelector('i').classList.add('bi-x-lg');
        applyInitialMobileView();
        setTimeout(() => {
            chatWindow.querySelector('.chat-scroll')?.scrollTo({top: 1e9, behavior: 'smooth'});
        }, 50);
      }

      function closeChat() {
        chatWindow.classList.remove('open');
        fabBtn.querySelector('i').classList.add('bi-chat-dots');
        fabBtn.querySelector('i').classList.remove('bi-x-lg');
      }

      fabBtn.addEventListener('click', () => {
        chatWindow.classList.contains('open') ? closeChat() : openChat();
      });

      closeBtn.addEventListener('click', closeChat);

      backBtn?.addEventListener('click', () => {
        layout.classList.remove('show-chat');
        layout.classList.add('show-threads');
      });

      document.querySelectorAll('#threadsList .thread').forEach(el => {
        el.addEventListener('click', () => {
          const isLarge = window.matchMedia('(min-width: 992px)').matches;
          if (!isLarge || !isDesktopView()) {
            layout.classList.remove('show-threads');
            layout.classList.add('show-chat');
            setTimeout(() => {
              chatWindow.querySelector('.chat-scroll')?.scrollTo({top: 1e9, behavior: 'auto'});
            }, 50);
          }
        });
      });

      window.addEventListener('resize', () => {
        if (chatWindow.classList.contains('open')) {
          applyInitialMobileView();
        }
      });
    })();
    </script>
  <% } %>

